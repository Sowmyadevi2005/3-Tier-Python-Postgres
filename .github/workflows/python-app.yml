# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: 3-Tier-python-postgres-app

on:
  push:
    branches: [ "main" ]
    
permissions:
  contents: read

jobs:
#------------CI----------#
  CI:
    name: build,scan and test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        python -m pip install --upgrade pip
        pip install flake8  
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
   
    - name: Security scan with Bandit
      run: |
        pip install bandit
        bandit -r . --exit-zero 
    
    - name: Trivy Install & FS scan
      run: |
       sudo apt-get install -y wget gnupg
       wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
       echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
       sudo apt-get update -y
       sudo apt-get install trivy -y
       trivy fs --format table -o fs-report.json .
      
    - name: Gitleaks Installation & code scan
      run: |
        sudo apt-get update -y
        sudo apt-get install -y gitleaks
        gitleaks detect --source . -r gitleaks-report.json -f json
           
    - name: Run Test cases
      continue-on-error: true
      run: |
        pip install pytest
        pytest

    - name:  Checkout for SonarQube
      uses: actions/checkout@v4
      with:
          fetch-depth: 0
      # Triggering SonarQube analysis as results of it are required by Quality Gate check.
    - name: SonarQube Scan
      continue-on-error: true
      uses: sonarsource/sonarqube-scan-action@v1.1.0
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      continue-on-error: true
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
      with:
          pollingTimeoutSec: 600
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 


#----------------CD----------------------

  Docker-build-push:
    name: Docker build, push 
    runs-on: ubuntu-latest
    
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: sowmya205/python-postgres:2

  k8s-deployment:
    name: k8s Deployment
    runs-on: ubuntu-latest
    needs: Docker-build-push
   
    steps:
      - name: Checkout
        id: checkout_code
        uses: actions/checkout@v3

      - name: AWS Credentials to EKS cluster
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
          role-to-assume: ${{ secrets.EKS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.23.6'

      - name: Decode kubeconfig and apply manifests
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/config
          kubectl apply -f K8s/ 
